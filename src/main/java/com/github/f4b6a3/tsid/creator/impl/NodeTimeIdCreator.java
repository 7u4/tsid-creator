/*
 * MIT License
 * 
 * Copyright (c) 2020 Fabio Lima
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package com.github.f4b6a3.tsid.creator.impl;

import com.github.f4b6a3.tsid.creator.AbstractTimeIdCreator;
import com.github.f4b6a3.tsid.strategy.timestamp.DefaultTimestampStrategy;
import com.github.f4b6a3.tsid.util.TsidConverter;

/**
 * Factory that creates time sortable IDs (TSIDs).
 * 
 * The TSIDs generated by this contain a node identifier from 0 to 1,023.
 * 
 * It can generate up to 4,096 TSIDs per millisecond.
 * 
 * These are the random component settings:
 * 
 * - Node identifier bit length: 10;
 * 
 * - Maximum node value: 2^10 = 1024;
 * 
 * - Counter bit length: 12;
 * 
 * - Maximum counter value: 2^12 = 4096.
 */
public class NodeTimeIdCreator extends AbstractTimeIdCreator {

	/**
	 * Construct an instance of {@link NodeTimeIdCreator}.
	 * 
	 * The default node bit length is 10.
	 * 
	 * @param nodeid the node identifier
	 */
	public NodeTimeIdCreator(int nodeid) {
		this.timestampStrategy = new DefaultTimestampStrategy();
		this.nodeid = nodeid & DEFAULT_NODEID_TRUNC;
		this.reset();
	}

	/**
	 * Construct an instance of {@link NodeTimeIdCreator}.
	 * 
	 * The default node identifier is random.
	 * 
	 * The default node bit length is 10.
	 */
	public NodeTimeIdCreator() {
		this(THREAD_LOCAL_RANDOM.get().nextInt());
	}

	@Override
	public synchronized long create() {
		return create(this.nodeid);
	}

	public synchronized long create(int nodeid) {
		return create(nodeid & DEFAULT_NODEID_TRUNC, this.counter, DEFAULT_COUNTER_LENGTH);
	}

	public synchronized String createString(int nodeid) {
		return TsidConverter.toString(create(nodeid));
	}
	
	@Override
	protected synchronized void reset() {

		// Update the counter with a random value
		this.counter = THREAD_LOCAL_RANDOM.get().nextInt() & DEFAULT_COUNTER_TRUNC;

		// Update the maximum incrementing value
		this.incrementLimit = this.counter | (0x00000001 << DEFAULT_COUNTER_LENGTH);
	}
}
